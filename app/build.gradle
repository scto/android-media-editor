plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

// Map for the version code that gives each ABI a value.
ext.abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, x86: 3, x86_64: 4]

//Different version codes per architecture (for F-Droid support)
android.applicationVariants.configureEach { variant ->
    variant.outputs.each { output ->
        def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter(com.android.build.OutputFile.ABI))
        if (baseAbiVersionCode != null) {
            output.versionCodeOverride = (100 * project.android.defaultConfig.versionCode) + baseAbiVersionCode
        } else {
            output.versionCodeOverride = 100 * project.android.defaultConfig.versionCode
        }
    }

}

android {
    namespace 'eu.artectrex.bunny'
    compileSdk 35

    defaultConfig {
        applicationId 'eu.artectrex.bunny'
        minSdk 21
        targetSdk 35
        versionCode 5
        versionName "4.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    splits {
        // Configures multiple APKs based on ABI.
        abi {

            // Enables building multiple APKs per ABI.
            enable true

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for "x86", "x86_64", "arm64-v8a" and "armeabi-v7a".

            // Resets the list of ABIs for Gradle to create APKs for to none.
            reset()

            // Specifies a list of ABIs for Gradle to create APKs for.
            //noinspection ChromeOsAbiSupport
            include project.ext.abiCodes.keySet() as String[]

            // Specifies that we don't want to also generate a universal APK that includes all ABIs.
            universalApk false
        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        viewBinding true
    }
    android.applicationVariants.configureEach { variant ->
        variant.resValue 'string', 'application_id', variant.applicationId
        variant.resValue "string", "versionName", variant.versionName
    }
}
configurations.configureEach {
    resolutionStrategy.cacheDynamicVersionsFor 5, 'seconds'
}
dependencies {

    implementation 'androidx.core:core-ktx:1.15.0'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.8.4'
    implementation 'androidx.navigation:navigation-ui-ktx:2.8.4'

    implementation 'org.pixeldroid.pixeldroid:android-media-editor:4.3'
    /* When using local gradle repo, use these three instead of the combined one on the line above:
    implementation('org.pixeldroid.pixeldroid:common:testing'){
        setChanging(true)
    }
    implementation('org.pixeldroid.pixeldroid:videoEditor:testing'){
        setChanging(true)
    }
    implementation('org.pixeldroid.pixeldroid:photoEditor:testing'){
        setChanging(true)
    }*/
    implementation project(path: ':pixel_common')

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
}